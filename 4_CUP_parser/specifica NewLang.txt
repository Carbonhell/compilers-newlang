Specifiche grammaticali e lessicali del nostro linguaggio NewLang



************* Specifica grammaticale **************** 

Program -> DeclList MainFunDecl DeclList
DeclList -> VarDecl DeclList | FunDecl DeclList | /* empty */
MainFunDecl -> MAIN FunDecl

VarDecl ::= Type IdInitList SEMI
	| VAR IdInitObblList SEMI

Type ::= INTEGER | BOOL | REAL | STRING | CHAR

IdInitList ::= ID 
	| IdInitList COMMA ID
	| ID ASSIGN Expr
	| IdInitList COMMA ID ASSIGN Expr

IdInitObblList ::= ID ASSIGN Const
	| IdInitObblList COMMA ID ASSIGN Const

Const ::= INTEGER_CONST | REAL_CONST | TRUE | FALSE | STRING_CONST | CHAR_CONST

FunDecl -> DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 

Body -> LBRACK VarDeclList StatList RBRACK

ParamDeclList ::= /*empty */ 
	| NonEmptyParamDeclList

NonEmptyParamDeclList ::= ParDecl
	| NonEmptyParamDeclList PIPE ParDecl

ParDecl ::= Type IdList
	| OUT Type IdList
	
TypeOrVoid -> Type | VOID

VarDeclList -> /* empty */ 
	| VardDecl VarDeclList
	
StatList ::= Stat 
	 | Stat StatList
	

Stat ::= IfStat 
	| ForStat 
	| ReadStat SEMI
	| WriteStat SEMI
	| AssignStat SEMI
        | WhileStat 
	| FunCall SEMI
	| RETURN Expr SEMI
	| RETURN SEMI
	| /* empty */
	
IfStat ::= IF Expr THEN Body Else

Else ::= /* empty */ 
	| ELSE Body

WhileStat ::= WHILE Expr LOOP Body
	
ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body

ReadStat ::= IdList READ STRING_CONST 
	|  IdList READ

IdList ::= ID 
	| IdList COMMA ID

WriteStat ::= LPAR ExprList RPAR WRITE         /* nella versione corretta sono */
	   | LPAR ExprList RPAR WRITELN        /* stati aggiunti LPAR ed RPAR */

	
AssignStat ::=  IdList ASSIGN ExprList

FunCall ::= ID LPAR ExprList RPAR   
	| ID LPAR RPAR 
  
ExprList ::= Expr	
	| Expr COMMA ExprList
	
Expr ::= TRUE                            
	| FALSE                           
	| INTEGER_CONST                    
	| REAL_CONST
	| STRING_CONST
	| CHAR_CONST
	| ID
	| FunCall
	| Expr  PLUS Expr
	| Expr  MINUS Expr
	| Expr  TIMES Expr
	| Expr  DIV Expr
	| Expr  AND Expr
	| Expr POW Expr
	| Expr STR_CONCAT Expr
	| Expr  OR Expr
	| Expr  GT Expr
	| Expr  GE Expr
	| Expr  LT Expr
	| Expr  LE Expr
	| Expr  EQ Expr
	| Expr  NE Expr
	| MINUS Expr
	| NOT Expr
	| LPAR Expr RPAR


************ Specifica lessicale ****************************

I commenti di linea iniziano con ||
Un blocco di commenti Ã¨ delimitato a |*  e |

"start:" MAIN
";"  SEMI
","  COMMA
"|"  PIPE
"var"  VAR
"integer" INT
"float" FLOAT
"string" STRING
"boolean" BOOL
"char" CHAR
"void"  VOID

"def"  DEF
"out"   OUT
"for"  FOR
"if"   IF
"else"  ELSE
"while" WHILE
"to"  TO
"loop" LOOP
"<--"  READ
"-->"  WRITE
"-->!"  WRITELN

"("  LPAR
")"  RPAR
"{"  LBRAC
"}"  RBRAC
 ":"  COLON
"<<"  ASSIGN
"return" RETURN

/[$_A-Za-z][$_A-Za-z0-9]*/  ID
espressione INTEGER_CONST     // senza notazione ingegneristica 
espressione REAL_CONST        // senza notazione ingegneristica
espressione STRING_CONST   // usando " 
espressione CHAR_CONST     // usando '

"true" TRUE 
"false" FALSE 
'+'  PLUS 
'-'  MINUS 
'*'  TIMES 
'/'  DIV 
'^'  POW 
'&'  STR_CONCAT 
'='  EQ 
'<>' or '!='  NE 
'<'  LT 
'<=' LE 
'>'  GT 
'>=' GE 
'and' AND 
'or'  OR 
'not'  NOT 
