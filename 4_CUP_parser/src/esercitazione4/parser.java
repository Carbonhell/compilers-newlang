
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import esercitazione4.SyntaxTreeNodes.*;
import esercitazione4.SyntaxTreeNodes.Expressions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\006\012\000\002\016\006\000\002\014\002\000\002\014" +
    "\003\000\002\021\003\000\002\021\005\000\002\022\004" +
    "\000\002\022\005\000\002\015\003\000\002\015\003\000" +
    "\002\024\002\000\002\024\004\000\002\020\004\000\002" +
    "\020\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\025\004\000\002\025\005\000\002\025\004\000" +
    "\002\025\002\000\002\027\007\000\002\026\002\000\002" +
    "\026\004\000\002\034\006\000\002\030\012\000\002\031" +
    "\005\000\002\031\004\000\002\023\003\000\002\023\005" +
    "\000\002\032\006\000\002\032\006\000\002\033\005\000" +
    "\002\035\006\000\002\035\005\000\002\017\003\000\002" +
    "\017\005\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\012\004\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\022\004\ufffd\010\007\011\017\012\016\013" +
    "\015\014\014\015\012\017\013\001\002\000\004\067\243" +
    "\001\002\000\004\002\241\001\002\000\024\002\ufffd\004" +
    "\ufffd\010\007\011\017\012\016\013\015\014\014\015\012" +
    "\017\013\001\002\000\004\067\222\001\002\000\024\002" +
    "\ufffd\004\ufffd\010\007\011\017\012\016\013\015\014\014" +
    "\015\012\017\013\001\002\000\004\004\215\001\002\000" +
    "\006\035\ufff5\067\ufff5\001\002\000\004\067\020\001\002" +
    "\000\006\035\ufff8\067\ufff8\001\002\000\006\035\ufff6\067" +
    "\ufff6\001\002\000\006\035\ufff7\067\ufff7\001\002\000\006" +
    "\035\ufff9\067\ufff9\001\002\000\004\033\021\001\002\000" +
    "\020\011\017\012\016\013\015\014\014\015\012\020\026" +
    "\034\uffe6\001\002\000\004\034\037\001\002\000\004\067" +
    "\031\001\002\000\006\007\uffe4\034\uffe4\001\002\000\006" +
    "\007\034\034\uffe5\001\002\000\014\011\017\012\016\013" +
    "\015\014\014\015\012\001\002\000\004\067\031\001\002" +
    "\000\010\006\032\007\uffe1\034\uffe1\001\002\000\010\006" +
    "\uffc9\007\uffc9\034\uffc9\001\002\000\004\067\033\001\002" +
    "\000\014\006\uffc8\007\uffc8\030\uffc8\034\uffc8\040\uffc8\001" +
    "\002\000\016\011\017\012\016\013\015\014\014\015\012" +
    "\020\026\001\002\000\006\007\uffe3\034\uffe3\001\002\000" +
    "\010\006\032\007\uffe2\034\uffe2\001\002\000\004\037\040" +
    "\001\002\000\016\011\017\012\016\013\015\014\014\015" +
    "\012\016\043\001\002\000\004\035\044\001\002\000\004" +
    "\035\uffe0\001\002\000\004\035\uffdf\001\002\000\034\010" +
    "\007\011\017\012\016\013\015\014\014\015\012\021\uffde" +
    "\022\uffde\025\uffde\033\uffde\036\uffde\041\uffde\067\uffde\001" +
    "\002\000\024\002\uffe8\004\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\017\uffe8\001\002\000\020\021" +
    "\051\022\054\025\066\033\070\036\uffd1\041\053\067\056" +
    "\001\002\000\034\010\007\011\017\012\016\013\015\014" +
    "\014\015\012\021\uffde\022\uffde\025\uffde\033\uffde\036\uffde" +
    "\041\uffde\067\uffde\001\002\000\020\021\uffdd\022\uffdd\025" +
    "\uffdd\033\uffdd\036\uffdd\041\uffdd\067\uffdd\001\002\000\004" +
    "\067\205\001\002\000\020\021\uffd5\022\uffd5\025\uffd5\033" +
    "\uffd5\036\uffd5\041\uffd5\067\uffd5\001\002\000\030\005\203" +
    "\033\105\042\104\043\076\045\102\062\100\063\074\064" +
    "\101\065\103\066\071\067\075\001\002\000\026\033\105" +
    "\042\104\043\076\045\102\062\100\063\074\064\101\065" +
    "\103\066\071\067\075\001\002\000\020\021\uffda\022\uffda" +
    "\025\uffda\033\uffda\036\uffda\041\uffda\067\uffda\001\002\000" +
    "\012\006\uffc9\030\uffc9\033\146\040\uffc9\001\002\000\020" +
    "\021\051\022\054\025\066\033\070\036\173\041\053\067" +
    "\056\001\002\000\004\005\171\001\002\000\004\005\170" +
    "\001\002\000\010\006\032\030\164\040\165\001\002\000" +
    "\004\005\163\001\002\000\020\021\uffdb\022\uffdb\025\uffdb" +
    "\033\uffdb\036\uffdb\041\uffdb\067\uffdb\001\002\000\004\005" +
    "\162\001\002\000\026\033\105\042\104\043\076\045\102" +
    "\062\100\063\074\064\101\065\103\066\071\067\075\001" +
    "\002\000\020\021\uffd9\022\uffd9\025\uffd9\033\uffd9\036\uffd9" +
    "\041\uffd9\067\uffd9\001\002\000\026\033\105\042\104\043" +
    "\076\045\102\062\100\063\074\064\101\065\103\066\071" +
    "\067\075\001\002\000\050\005\uffbb\006\uffbb\023\uffbb\027" +
    "\uffbb\034\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\044\005\uffc2\006\155" +
    "\034\uffc2\044\110\045\124\046\120\047\117\050\107\051" +
    "\113\052\112\053\121\054\122\055\114\056\116\057\111" +
    "\060\125\061\123\001\002\000\004\034\152\001\002\000" +
    "\050\005\uffbe\006\uffbe\023\uffbe\027\uffbe\034\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\001\002\000\052\005\uffba\006\uffba\023\uffba\027\uffba\033" +
    "\146\034\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\001\002\000\050\005\uffbf\006\uffbf" +
    "\023\uffbf\027\uffbf\034\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000\050\005" +
    "\uffb9\006\uffb9\023\uffb9\027\uffb9\034\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002" +
    "\000\026\033\105\042\104\043\076\045\102\062\100\063" +
    "\074\064\101\065\103\066\071\067\075\001\002\000\050" +
    "\005\uffbd\006\uffbd\023\uffbd\027\uffbd\034\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001" +
    "\002\000\026\033\105\042\104\043\076\045\102\062\100" +
    "\063\074\064\101\065\103\066\071\067\075\001\002\000" +
    "\050\005\uffbc\006\uffbc\023\uffbc\027\uffbc\034\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\001\002\000\050\005\uffc0\006\uffc0\023\uffc0\027\uffc0\034" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\001\002\000\026\033\105\042\104\043\076" +
    "\045\102\062\100\063\074\064\101\065\103\066\071\067" +
    "\075\001\002\000\040\034\115\044\110\045\124\046\120" +
    "\047\117\050\107\051\113\052\112\053\121\054\122\055" +
    "\114\056\116\057\111\060\125\061\123\001\002\000\026" +
    "\033\105\042\104\043\076\045\102\062\100\063\074\064" +
    "\101\065\103\066\071\067\075\001\002\000\026\033\105" +
    "\042\104\043\076\045\102\062\100\063\074\064\101\065" +
    "\103\066\071\067\075\001\002\000\026\033\105\042\104" +
    "\043\076\045\102\062\100\063\074\064\101\065\103\066" +
    "\071\067\075\001\002\000\026\033\105\042\104\043\076" +
    "\045\102\062\100\063\074\064\101\065\103\066\071\067" +
    "\075\001\002\000\026\033\105\042\104\043\076\045\102" +
    "\062\100\063\074\064\101\065\103\066\071\067\075\001" +
    "\002\000\026\033\105\042\104\043\076\045\102\062\100" +
    "\063\074\064\101\065\103\066\071\067\075\001\002\000" +
    "\050\005\uffa8\006\uffa8\023\uffa8\027\uffa8\034\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\001\002\000\026\033\105\042\104\043\076\045\102\062" +
    "\100\063\074\064\101\065\103\066\071\067\075\001\002" +
    "\000\026\033\105\042\104\043\076\045\102\062\100\063" +
    "\074\064\101\065\103\066\071\067\075\001\002\000\026" +
    "\033\105\042\104\043\076\045\102\062\100\063\074\064" +
    "\101\065\103\066\071\067\075\001\002\000\026\033\105" +
    "\042\104\043\076\045\102\062\100\063\074\064\101\065" +
    "\103\066\071\067\075\001\002\000\026\033\105\042\104" +
    "\043\076\045\102\062\100\063\074\064\101\065\103\066" +
    "\071\067\075\001\002\000\026\033\105\042\104\043\076" +
    "\045\102\062\100\063\074\064\101\065\103\066\071\067" +
    "\075\001\002\000\026\033\105\042\104\043\076\045\102" +
    "\062\100\063\074\064\101\065\103\066\071\067\075\001" +
    "\002\000\026\033\105\042\104\043\076\045\102\062\100" +
    "\063\074\064\101\065\103\066\071\067\075\001\002\000" +
    "\050\005\uffb4\006\uffb4\023\uffb4\027\uffb4\034\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\001\002\000\050\005\uffb7\006\uffb7\023\uffb7\027\uffb7\034" +
    "\uffb7\044\uffb7\045\uffb7\046\120\047\117\050\107\051\113" +
    "\052\112\053\121\054\122\055\114\056\116\057\111\060" +
    "\125\061\123\001\002\000\050\005\uffb1\006\uffb1\023\uffb1" +
    "\027\uffb1\034\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\001\002\000\050\005\uffae\006" +
    "\uffae\023\uffae\027\uffae\034\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\uffae\001\002\000\050" +
    "\005\uffab\006\uffab\023\uffab\027\uffab\034\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\001" +
    "\002\000\050\005\uffb6\006\uffb6\023\uffb6\027\uffb6\034\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\112\053\121\054\122\055\114\056\116\057\111\060\125" +
    "\061\123\001\002\000\050\005\uffb5\006\uffb5\023\uffb5\027" +
    "\uffb5\034\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\112\053\121\054\122\055\114\056\116\057" +
    "\111\060\125\061\123\001\002\000\050\005\uffb0\006\uffb0" +
    "\023\uffb0\027\uffb0\034\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002\000\050\005" +
    "\uffad\006\uffad\023\uffad\027\uffad\034\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\001\002" +
    "\000\050\005\uffb2\006\uffb2\023\uffb2\027\uffb2\034\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\112" +
    "\053\121\054\122\055\114\056\116\057\111\060\125\061" +
    "\123\001\002\000\050\005\uffac\006\uffac\023\uffac\027\uffac" +
    "\034\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\001\002\000\050\005\uffaf\006\uffaf\023" +
    "\uffaf\027\uffaf\034\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\050\005\uffb8" +
    "\006\uffb8\023\uffb8\027\uffb8\034\uffb8\044\uffb8\045\uffb8\046" +
    "\120\047\117\050\107\051\113\052\112\053\121\054\122" +
    "\055\114\056\116\057\111\060\125\061\123\001\002\000" +
    "\050\005\uffb3\006\uffb3\023\uffb3\027\uffb3\034\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\112\053" +
    "\121\054\122\055\114\056\116\057\111\060\125\061\123" +
    "\001\002\000\050\005\uffaa\006\uffaa\023\uffaa\027\uffaa\034" +
    "\uffaa\044\uffaa\045\uffaa\046\120\047\117\050\107\051\113" +
    "\052\112\053\121\054\122\055\114\056\116\057\111\060" +
    "\125\061\123\001\002\000\050\005\uffa9\006\uffa9\023\uffa9" +
    "\027\uffa9\034\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\001\002\000\030\033\105\034" +
    "\150\042\104\043\076\045\102\062\100\063\074\064\101" +
    "\065\103\066\071\067\075\001\002\000\004\034\151\001" +
    "\002\000\050\005\uffc3\006\uffc3\023\uffc3\027\uffc3\034\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\001\002\000\050\005\uffc4\006\uffc4\023\uffc4\027" +
    "\uffc4\034\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\006\031\154\032\153" +
    "\001\002\000\004\005\uffc6\001\002\000\004\005\uffc7\001" +
    "\002\000\026\033\105\042\104\043\076\045\102\062\100" +
    "\063\074\064\101\065\103\066\071\067\075\001\002\000" +
    "\006\005\uffc1\034\uffc1\001\002\000\040\027\160\044\110" +
    "\045\124\046\120\047\117\050\107\051\113\052\112\053" +
    "\121\054\122\055\114\056\116\057\111\060\125\061\123" +
    "\001\002\000\004\035\044\001\002\000\020\021\uffcd\022" +
    "\uffcd\025\uffcd\033\uffcd\036\uffcd\041\uffcd\067\uffcd\001\002" +
    "\000\020\021\uffd8\022\uffd8\025\uffd8\033\uffd8\036\uffd8\041" +
    "\uffd8\067\uffd8\001\002\000\020\021\uffd7\022\uffd7\025\uffd7" +
    "\033\uffd7\036\uffd7\041\uffd7\067\uffd7\001\002\000\006\005" +
    "\uffca\065\167\001\002\000\026\033\105\042\104\043\076" +
    "\045\102\062\100\063\074\064\101\065\103\066\071\067" +
    "\075\001\002\000\004\005\uffc5\001\002\000\004\005\uffcb" +
    "\001\002\000\020\021\uffd4\022\uffd4\025\uffd4\033\uffd4\036" +
    "\uffd4\041\uffd4\067\uffd4\001\002\000\020\021\uffd6\022\uffd6" +
    "\025\uffd6\033\uffd6\036\uffd6\041\uffd6\067\uffd6\001\002\000" +
    "\020\021\uffdc\022\uffdc\025\uffdc\033\uffdc\036\uffdc\041\uffdc" +
    "\067\uffdc\001\002\000\044\002\uffe7\004\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\033\uffe7\036\uffe7\041\uffe7\067" +
    "\uffe7\001\002\000\040\023\175\044\110\045\124\046\120" +
    "\047\117\050\107\051\113\052\112\053\121\054\122\055" +
    "\114\056\116\057\111\060\125\061\123\001\002\000\004" +
    "\035\044\001\002\000\022\021\uffcf\022\uffcf\024\200\025" +
    "\uffcf\033\uffcf\036\uffcf\041\uffcf\067\uffcf\001\002\000\020" +
    "\021\uffd0\022\uffd0\025\uffd0\033\uffd0\036\uffd0\041\uffd0\067" +
    "\uffd0\001\002\000\004\035\044\001\002\000\020\021\uffce" +
    "\022\uffce\025\uffce\033\uffce\036\uffce\041\uffce\067\uffce\001" +
    "\002\000\040\005\204\044\110\045\124\046\120\047\117" +
    "\050\107\051\113\052\112\053\121\054\122\055\114\056" +
    "\116\057\111\060\125\061\123\001\002\000\020\021\uffd2" +
    "\022\uffd2\025\uffd2\033\uffd2\036\uffd2\041\uffd2\067\uffd2\001" +
    "\002\000\020\021\uffd3\022\uffd3\025\uffd3\033\uffd3\036\uffd3" +
    "\041\uffd3\067\uffd3\001\002\000\004\040\206\001\002\000" +
    "\004\063\207\001\002\000\004\026\210\001\002\000\004" +
    "\063\211\001\002\000\004\027\212\001\002\000\004\035" +
    "\044\001\002\000\020\021\uffcc\022\uffcc\025\uffcc\033\uffcc" +
    "\036\uffcc\041\uffcc\067\uffcc\001\002\000\022\002\ufffd\010" +
    "\007\011\017\012\016\013\015\014\014\015\012\017\013" +
    "\001\002\000\004\017\013\001\002\000\022\002\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc" +
    "\001\002\000\004\002\001\001\002\000\006\002\uffff\004" +
    "\uffff\001\002\000\006\005\234\006\233\001\002\000\004" +
    "\040\223\001\002\000\016\042\230\043\227\063\231\064" +
    "\232\065\226\066\224\001\002\000\006\005\uffe9\006\uffe9" +
    "\001\002\000\006\005\ufff0\006\ufff0\001\002\000\006\005" +
    "\uffea\006\uffea\001\002\000\006\005\uffeb\006\uffeb\001\002" +
    "\000\006\005\uffec\006\uffec\001\002\000\006\005\uffee\006" +
    "\uffee\001\002\000\006\005\uffed\006\uffed\001\002\000\004" +
    "\067\235\001\002\000\042\002\ufffa\004\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\021\ufffa" +
    "\022\ufffa\025\ufffa\033\ufffa\036\ufffa\041\ufffa\067\ufffa\001" +
    "\002\000\004\040\236\001\002\000\016\042\230\043\227" +
    "\063\231\064\232\065\226\066\224\001\002\000\006\005" +
    "\uffef\006\uffef\001\002\000\006\002\ufffe\004\ufffe\001\002" +
    "\000\004\002\000\001\002\000\006\005\247\006\246\001" +
    "\002\000\010\005\ufff4\006\ufff4\040\244\001\002\000\026" +
    "\033\105\042\104\043\076\045\102\062\100\063\074\064" +
    "\101\065\103\066\071\067\075\001\002\000\042\005\ufff2" +
    "\006\ufff2\044\110\045\124\046\120\047\117\050\107\051" +
    "\113\052\112\053\121\054\122\055\114\056\116\057\111" +
    "\060\125\061\123\001\002\000\004\067\250\001\002\000" +
    "\042\002\ufffb\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\017\ufffb\021\ufffb\022\ufffb\025\ufffb\033" +
    "\ufffb\036\ufffb\041\ufffb\067\ufffb\001\002\000\010\005\ufff3" +
    "\006\ufff3\040\251\001\002\000\026\033\105\042\104\043" +
    "\076\045\102\062\100\063\074\064\101\065\103\066\071" +
    "\067\075\001\002\000\042\005\ufff1\006\ufff1\044\110\045" +
    "\124\046\120\047\117\050\107\051\113\052\112\053\121" +
    "\054\122\055\114\056\116\057\111\060\125\061\123\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\014\002\004\003\010\005\007\006\005\007" +
    "\003\001\001\000\004\010\241\001\001\000\002\001\001" +
    "\000\012\003\237\005\007\006\005\007\003\001\001\000" +
    "\004\011\220\001\001\000\012\003\217\005\007\006\005" +
    "\007\003\001\001\000\004\004\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\022\014\021\021\024\022\023\001\001\000\002" +
    "\001\001\000\004\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\026\001\001\000\004\023\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\022\022\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\041\015\040\001\001\000\004\016\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\007" +
    "\003\024\045\001\001\000\002\001\001\000\026\020\056" +
    "\023\061\025\063\027\054\030\066\031\064\032\062\033" +
    "\057\034\051\035\060\001\001\000\010\005\046\007\003" +
    "\024\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\201\035\076\001\001\000\006" +
    "\012\173\035\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\023\061\025\171\027\054\030\066\031\064" +
    "\032\062\033\057\034\051\035\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\156\035" +
    "\076\001\001\000\002\001\001\000\010\012\071\017\072" +
    "\035\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\144\035\076\001" +
    "\001\000\002\001\001\000\006\012\143\035\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\105\035" +
    "\076\001\001\000\002\001\001\000\006\012\142\035\076" +
    "\001\001\000\006\012\141\035\076\001\001\000\006\012" +
    "\140\035\076\001\001\000\006\012\137\035\076\001\001" +
    "\000\006\012\136\035\076\001\001\000\006\012\135\035" +
    "\076\001\001\000\002\001\001\000\006\012\134\035\076" +
    "\001\001\000\006\012\133\035\076\001\001\000\006\012" +
    "\132\035\076\001\001\000\006\012\131\035\076\001\001" +
    "\000\006\012\130\035\076\001\001\000\006\012\127\035" +
    "\076\001\001\000\006\012\126\035\076\001\001\000\006" +
    "\012\125\035\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\071\017\146\035\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\071\017\155\035\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\071\017\165\035\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\175\001\001\000\004\026\176\001\001\000" +
    "\002\001\001\000\004\016\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\212\001\001\000" +
    "\002\001\001\000\012\003\216\005\007\006\005\007\003" +
    "\001\001\000\004\006\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\244" +
    "\035\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\251\035\076" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              Object RESULT =null;
		int preDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int preDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object preDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int postDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object postDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program((DeclList) preDecls, (MainFunDecl) main, (DeclList) postDecls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Object RESULT =null;
		int vDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList((VarDecl) vDecl, (DeclList) dList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Object RESULT =null;
		int fDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList((FunDecl) fDecl, (DeclList) dList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;
		 RESULT = new DeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= T_MAIN FunDecl 
            {
              Object RESULT =null;
		int fDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MainFunDecl((FunDecl) fDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList T_SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl((Type) type, (IdInitList) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= T_VAR IdInitObblList T_SEMI 
            {
              Object RESULT =null;
		int idObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idObblList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl((IdInitObblList) idObblList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= T_INT 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= T_BOOL 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= T_FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= T_STRING 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= T_CHAR 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.CHAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= T_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitList(new Identifier(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList T_COMMA T_ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitList(new Identifier(id), (IdInitList) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= T_ID T_ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitList(new Identifier(id), (Expr) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList T_COMMA T_ID T_ASSIGN Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitList(new Identifier(id), (Expr) expr, (IdInitList) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= T_ID T_ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitObblList(new Identifier(id), (Const) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList T_COMMA T_ID T_ASSIGN Const 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdInitObblList(new Identifier(id), (Const) expr, (IdInitObblList) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= T_INTEGER_CONST 
            {
              Object RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const(new IntegerConstExpr(intConst), new Type(Type.INT)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= T_REAL_CONST 
            {
              Object RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const(new RealConstExpr(realConst), new Type(Type.FLOAT)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= T_TRUE 
            {
              Object RESULT =null;
		 RESULT = new Const(new TrueConstExpr(), new Type(Type.BOOL)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= T_FALSE 
            {
              Object RESULT =null;
		 RESULT = new Const(new FalseConstExpr(), new Type(Type.BOOL)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= T_STRING_CONST 
            {
              Object RESULT =null;
		int strConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String strConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const(new StringConstExpr(strConst), new Type(Type.STRING)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= T_CHAR_CONST 
            {
              Object RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const(new CharConstExpr(charConst), new Type(Type.CHAR)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= T_DEF T_ID T_LPAR ParamDeclList T_RPAR T_COLON TypeOrVoid Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object dList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunDecl(new Identifier(id), (ParamDeclList) dList, (Type) type, (Body) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= T_LBRAC VarDeclList StatList T_RBRAC 
            {
              Object RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Body((VarDeclList) vList, (StatList) sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = new ParamDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclList((ParamDeclList) declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int pDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclList((ParDecl) pDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList T_PIPE ParDecl 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclList((ParDecl) pDecl, (ParamDeclList) declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl((Type) type, (IdList) idList, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= T_OUT Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl((Type) type, (IdList) idList, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= T_VOID 
            {
              Object RESULT =null;
		 RESULT = new Type(Type.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int vDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclList((VarDecl) vDecl, (VarDeclList) declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= StatList Stat 
            {
              Object RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatList((Stat) stat, (StatList) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatList((Stat) stat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Object RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Object RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = forStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat T_SEMI 
            {
              Object RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = readStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat T_SEMI 
            {
              Object RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = writeStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat T_SEMI 
            {
              Object RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = assignStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Object RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall T_SEMI 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStat((Expr) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= T_RETURN T_SEMI 
            {
              Object RESULT =null;
		 RESULT = new ReturnStat(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfStat ::= T_IF Expr T_THEN Body Else 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elseStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStat((Expr) expr, (Body) body, (Else) elseStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= T_ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Else((Body) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= T_WHILE Expr T_LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStat((Expr) expr, (Body) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForStat ::= T_FOR T_ID T_ASSIGN T_INTEGER_CONST T_TO T_INTEGER_CONST T_LOOP Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String from = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStat(new Identifier(id), from, to, (Body) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList T_READ T_STRING_CONST 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int messageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String message = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStat((IdList) idList, new StringConstExpr(message)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList T_READ 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStat((IdList) idList, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= T_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdList(new Identifier(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList T_COMMA T_ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdList(new Identifier(id), (IdList) idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= T_LPAR ExprList T_RPAR T_WRITE 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStat((ExprList) exprList, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= T_LPAR ExprList T_RPAR T_WRITELN 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStat((ExprList) exprList, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList T_ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStat((IdList) idList, (ExprList) exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= T_ID T_LPAR ExprList T_RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCall(new Identifier(id), (ExprList) exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= T_ID T_LPAR T_RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCall(new Identifier(id), new ExprList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprList((Expr) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr T_COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprList((Expr) expr, (ExprList) exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= T_TRUE 
            {
              Object RESULT =null;
		 RESULT = new TrueConstExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= T_FALSE 
            {
              Object RESULT =null;
		 RESULT = new FalseConstExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= T_INTEGER_CONST 
            {
              Object RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerConstExpr(intConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= T_REAL_CONST 
            {
              Object RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealConstExpr(realConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= T_STRING_CONST 
            {
              Object RESULT =null;
		int strConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String strConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConstExpr(strConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= T_CHAR_CONST 
            {
              Object RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharConstExpr(charConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= T_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr T_PLUS Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr T_MINUS Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr T_TIMES Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr T_DIV Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr T_AND Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr T_POW Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PowExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr T_STR_CONCAT Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StrConcatExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr T_OR Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr T_GT Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GTExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr T_GE Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GEExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr T_LT Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LTExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr T_LE Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LEExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr T_EQ Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EQExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr T_NE Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NEExpr((Expr) l, (Expr) r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= T_MINUS Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpr((Expr) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= T_NOT Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr((Expr) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= T_LPAR Expr T_RPAR 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
